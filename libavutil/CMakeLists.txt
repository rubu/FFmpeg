get_library_version(avutil version.h LIBAVUTIL_VERSION)

write_version_file(ffversion.h AVUTIL_FFVERSION_H ../RELEASE)

file(WRITE avconfig.h "/* Generated by cmake */\n"
    "#ifndef AVUTIL_AVCONFIG_H\n"
    "#define AVUTIL_AVCONFIG_H\n"
    "#define AV_HAVE_BIGENDIAN ${BIG_ENDIAN}\n"
    "#define AV_HAVE_FAST_UNALIGNED ${FAST_UNALIGNED}\n"
    "#endif /* AVUTIL_AVCONFIG_H */\n"
)

set(BUILT_HEADERS
    avconfig.h
    ffversion.h
)

set(AVUTIL_HEADERS
    adler32.h
    aes.h
    aes_ctr.h
    attributes.h
    audio_fifo.h
    avassert.h
    avstring.h
    avutil.h
    base64.h
    blowfish.h
    bprint.h
    bswap.h
    buffer.h
    cast5.h
    camellia.h
    channel_layout.h
    common.h
    cpu.h
    crc.h
    des.h
    dict.h
    display.h
    dovi_meta.h
    downmix_info.h
    encryption_info.h
    error.h
    eval.h
    fifo.h
    file.h
    frame.h
    hash.h
    hdr_dynamic_metadata.h
    hmac.h
    hwcontext.h
    hwcontext_d3d11va.h
    hwcontext_drm.h
    hwcontext_dxva2.h
    hwcontext_qsv.h
    hwcontext_mediacodec.h
    hwcontext_vaapi.h
    hwcontext_videotoolbox.h
    hwcontext_vdpau.h
    hwcontext_vulkan.h
    imgutils.h
    intfloat.h
    intreadwrite.h
    lfg.h
    lls.h
    log.h
    macros.h
    mathematics.h
    mastering_display_metadata.h
    md5.h
    mem.h
    motion_vector.h
    murmur3.h
    opt.h
    parseutils.h
    pixdesc.h
    pixelutils.h
    pixfmt.h
    random_seed.h
    rc4.h
    rational.h
    replaygain.h
    ripemd.h
    samplefmt.h
    sha.h
    sha512.h
    spherical.h
    stereo3d.h
    threadmessage.h
    time.h
    timecode.h
    tree.h
    twofish.h
    version.h
    xtea.h
    tea.h
    tx.h
)

set(AVUTIL_SOURCES adler32.c
    aes.c
    aes_ctr.c
    audio_fifo.c
    avsscanf.c
    avstring.c
    base64.c
    blowfish.c
    bprint.c
    buffer.c
    cast5.c
    camellia.c
    channel_layout.c
    color_utils.c
    cpu.c
    crc.c
    des.c
    dict.c
    display.c
    dovi_meta.c
    downmix_info.c
    encryption_info.c
    error.c
    eval.c
    fifo.c
    file.c
    file_open.c
    film_grain_params.c
    float_dsp.c
    fixed_dsp.c
    frame.c
    hash.c
    hdr_dynamic_metadata.c
    hmac.c
    hwcontext.c
    imgutils.c
    integer.c
    intmath.c
    lfg.c
    lls.c
    log.c
    log2_tab.c
    mathematics.c
    mastering_display_metadata.c
    md5.c
    mem.c
    murmur3.c
    opt.c
    parseutils.c
    pixdesc.c
    pixelutils.c
    random_seed.c
    rational.c
    reverse.c
    rc4.c
    ripemd.c
    samplefmt.c
    sha.c
    sha512.c
    slicethread.c
    spherical.c
    stereo3d.c
    threadmessage.c
    time.c
    timecode.c
    tree.c
    tx.c
    tx_float.c
    tx_double.c
    tx_int32.c
    twofish.c
    utils.c
    video_enc_params.c
    xga_font_data.c
    xtea.c
    tea.c
)

if (${CONFIG_LZO})
    list(APPEND AVUTIL_SOURCES lzo.c)
endif (${CONFIG_LZO})
if (${CONFIG_D3D11VA})
    list(APPEND AVUTIL_SOURCES hwcontext_d3d11va.c)
endif (${CONFIG_D3D11VA})
if (${CONFIG_DXVA2})
    list(APPEND AVUTIL_SOURCES hwcontext_dxva2.c)
endif (${CONFIG_DXVA2})

list(FIND TARGET_ARCHITECTURE_NAMES "X86" IS_X86)
if (NOT IS_X86 EQUAL -1)
    add_subdirectory(x86)
endif ()

source_group("Assembly Files" FILES ${AVUTIL_X86_ASSEMBLY_SOURCES})
if (WIN32)
    set_source_files_properties(${AVUTIL_X86_ASSEMBLY_SOURCES} PROPERTIES VS_TOOL_OVERRIDE "NASM")
else ()
    set_source_files_properties(${AVUTIL_X86_ASSEMBLY_SOURCES} PROPERTIES LANGUAGE ASM_NASM)
endif ()
source_group("Source Files\\x86" FILES ${AVUTIL_X86_SOURCES})
if (WIN32 AND ${LIBRARY_TYPE} STREQUAL "SHARED")
    list(APPEND EXPORT_DEFINITIONS avutil.data.def)
endif ()
add_library(avutil ${LIBRARY_TYPE} ${AVUTIL_SOURCES} ${AVUTIL_X86_SOURCES} ${AVUTIL_X86_ASSEMBLY_SOURCES} ${AVUTIL_HEADERS} ${GENERATED_CONFIG_HEADERS} ${GENERATED_VERSION_HEADERS} ${EXPORT_DEFINITIONS})
if (WIN32)
    add_custom_command(TARGET avutil PRE_BUILD COMMAND if not exist  "$(IntDir)\\x86" mkdir "$(IntDir)\\x86")
endif ()
target_include_directories(avutil PRIVATE ${CMAKE_SOURCE_DIR})
target_compile_definitions(avutil PUBLIC HAVE_AV_CONFIG_H)

set_target_properties(avutil PROPERTIES PUBLIC_HEADER "${AVUTIL_HEADERS};${BUILT_HEADERS}")
set_target_properties(avutil PROPERTIES RUNTIME_OUTPUT_NAME "avutil-${LIBAVUTIL_VERSION}")
install(TARGETS avutil
    ARCHIVE
    LIBRARY
    PUBLIC_HEADER
        DESTINATION include/libavutil
    RUNTIME
)
if (WIN32 AND "${LIBRARY_TYPE}" STREQUAL "SHARED")
    install(FILES $<TARGET_PDB_FILE:avutil> DESTINATION bin OPTIONAL)
endif ()