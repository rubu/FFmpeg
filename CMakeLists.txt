cmake_minimum_required(VERSION 3.15)
project(ffmpeg)

function (write_version_file NAME GUARD RELEASE_FILE_PATH)
    file(STRINGS ${RELEASE_FILE_PATH} RELEASE_VERSION)
    file(WRITE ${NAME} "/* Automatically generated by cmake, do not manually edit! */\n"
        "#ifndef ${GUARD}\n"
        "#define ${GUARD}\n"
        "#define FFMPEG_VERSION \"${RELEASE_VERSION}\"\n"
        "#endif /* ${GUARD} */\n"
    )
endfunction (write_version_file)

function (get_library_version LIBRARY_NAME VERSION_FILE_PATH VERSION)
    string(TOUPPER ${LIBRARY_NAME} LIBRARY_NAME_UPPER)
    set(VERSION_PATTERN "^#define LIB${LIBRARY_NAME_UPPER}_VERSION_MAJOR[ \t]+([0-9]+)")
    file(STRINGS ${VERSION_FILE_PATH} VERSION_LINES REGEX ${VERSION_PATTERN})
    list(LENGTH VERSION_LINES VERSION_LINE_COUNT)
    if (NOT VERSION_LINE_COUNT EQUAL 1)
        message(FATAL_ERROR "failed to obtain version for ${LIBRARY_NAME}")
    else ()
        list(GET VERSION_LINES 0 VERSION_LINE)
        string(REGEX REPLACE ${VERSION_PATTERN} "\\1" VERSION_VALUE "${VERSION_LINE}")
        set(${VERSION} ${VERSION_VALUE} PARENT_SCOPE) 
    endif ()
endfunction (get_library_version)

#find_things_extern(){
#    thing=$1
#    pattern=$2
#    file=$source_path/$3
#    out=${4:-$thing}
#    sed -n "s/^[^#]*extern.*$pattern *ff_\([^ ]*\)_$thing;/\1_$out/p" "$file"
#}
function (find_things_extern THING_NAME PATTERN THING_FILE_PATH RESULT_LIST)
    set (EXTRA_ARGS ${ARGN})
    list(LENGTH EXTRA_ARGS NUM_EXTRA_ARGS)
    if (${NUM_EXTRA_ARGS} GREATER 0)
        list(GET EXTRA_ARGS 0 OUT)
    else ()
        set(OUT ${THING_NAME})
    endif ()
    set(LINE_PATTERN "^[^#]*extern.*${PATTERN} *ff_([^ ]*)_${THING_NAME};")
    file(STRINGS ${THING_FILE_PATH} LINES REGEX ${LINE_PATTERN})
    foreach(LINE ${LINES})
        string(REGEX REPLACE ${LINE_PATTERN} "\\1_${OUT}" THING ${LINE})
        string(TOUPPER ${THING} THING_UPPER)
        list(APPEND THINGS ${THING})
        set(CONFIG_${THING_UPPER} 1 PARENT_SCOPE)
    endforeach()
    set(${RESULT_LIST} ${THINGS} PARENT_SCOPE)
endfunction (find_things_extern)

#find_filters_extern(){
#    file=$source_path/$1
#    sed -n 's/^extern AVFilter ff_[avfsinkrc]\{2,5\}_\([[:alnum:]_]\{1,\}\);/\1_filter/p' $file
#}
function (find_filters_extern THING_FILE_PATH RESULT_LIST)
    set(LINE_PATTERN "^extern AVFilter ff_(([avfsinkrc]+)_([a-zA-Z0-9_]+));")
    file(STRINGS ${THING_FILE_PATH} LINES REGEX ${LINE_PATTERN})
    foreach(LINE ${LINES})
        string(REGEX REPLACE ${LINE_PATTERN} "\\3_filter" THING ${LINE})
        list(APPEND THINGS ${THING})
        string(TOUPPER ${THING} THING_UPPER)
        set(CONFIG_${THING_UPPER} 1 PARENT_SCOPE)
        string(REGEX REPLACE ${LINE_PATTERN} "\\1" FILTER_NAME ${LINE})
        set(${THING_UPPER}_NAME ${FILTER_NAME} PARENT_SCOPE)
    endforeach()
    set(${RESULT_LIST} ${THINGS} PARENT_SCOPE)
endfunction (find_filters_extern)

function (print_enabled_components FILE_PATH STRUCT_NAME NAME THINGS)
    file(WRITE ${FILE_PATH} "static const ${STRUCT_NAME} * const ${NAME}[] = {\n")
    foreach(THING ${THINGS})
        string(TOUPPER ${THING} THING_UPPER)
        if (${CONFIG_${THING_UPPER}})
            if ("${${THING_UPPER}_NAME}" STREQUAL "")
                file(APPEND ${FILE_PATH} "    &ff_${THING},\n")
            else ()
                file(APPEND ${FILE_PATH} "    &ff_${${THING_UPPER}_NAME},\n")
            endif ()
        endif ()
    endforeach()
    if ("${NAME}" STREQUAL "filter_list")
        file(APPEND ${FILE_PATH} "    &ff_asrc_abuffer,\n    &ff_vsrc_buffer,\n    &ff_asink_abuffer,\n    &ff_vsink_buffer,\n")
    endif ()
    file(APPEND ${FILE_PATH} "    NULL };\n")
endfunction (print_enabled_components)

function(configure_things THINGS)
    foreach (THING ${THINGS})
        string(TOUPPER ${THING} THING_UPPER)
        file(APPEND config.h "#define CONFIG_${THING_UPPER} ${CONFIG_${THING_UPPER}}\n")
    endforeach ()
endfunction (configure_things)

macro (check_math_function MATH_FUNCTION_NAME)
    string(TOUPPER ${MATH_FUNCTION_NAME} MATH_FUNCTION_NAME_UPPER)
    if (DEFINED ${MATH_FUNCTION_NAME_UPPER}_ARGS)
        set(MATH_FUNCTION_ARGUMENTS ${${MATH_FUNCTION_NAME_UPPER}_ARGS})
    else ()
        set(MATH_FUNCTION_ARGUMENTS "f")
    endif ()
    file(WRITE ${CMAKE_BINARY_DIR}/feature_tests/test_${MATH_FUNCTION_NAME}.c "#include <math.h>\n"
        "float foo(float f, float g) { return ${MATH_FUNCTION_NAME}(${MATH_FUNCTION_ARGUMENTS}); }\n"
        "int main(void){ return (int) foo; }\n"
    )
    try_compile(HAVE_MATH_FUNCTION ${CMAKE_BINARY_DIR}/feature_tests ${CMAKE_BINARY_DIR}/feature_tests/test_${MATH_FUNCTION_NAME}.c)
    if (HAVE_MATH_FUNCTION)
        set(HAVE_${MATH_FUNCTION_NAME_UPPER} 1)
    else ()
        set(HAVE_${MATH_FUNCTION_NAME_UPPER} 0)
    endif ()
endmacro ()

macro (check_builtin_function SOURCE_FILE FUNCTION_NAME)
    try_compile(HAVE_BUILTIN_FUNCTION ${CMAKE_BINARY_DIR}/feature_tests ${SOURCE_FILE})
    if (HAVE_BUILTIN_FUNCTION)
        set(HAVE_${FUNCTION_NAME} 1)
    else ()
        set(HAVE_${FUNCTION_NAME} 0)
    endif ()
endmacro ()

function (list_replace LIST INDEX NEWVALUE)
    list(INSERT ${LIST} ${INDEX} ${NEWVALUE})
    math(EXPR __INDEX "${INDEX} + 1")
    list(REMOVE_AT ${LIST} ${__INDEX})
endfunction (list_replace)

macro(create_variables PREFIX KEYS)
    foreach (KEY ${KEYS})
        set(${PREFIX}_${KEY} 1)
    endforeach ()
endmacro()

macro (create_config_variables KEYS)
    foreach (KEY ${KEYS})
        set(CONFIG_${KEY} 1)
     endforeach()
endmacro ()

macro (check_header NAME PATH)
    find_path(${NAME} ${PATH})
    set(HAS_${NAME} 1)
    if (${NAME} STREQUAL "${NAME}-NOTFOUND")
        set(HAS_${NAME} 0)
    endif ()
endmacro ()

option(DISABLE_NETWORK "Disable network" OFF)
option(DISABLE_AVCODEC "Disable avcodec" OFF)
option(DISABLE_AVUTIL "Disable avutil" OFF)
option(DISABLE_AVFORMAT "Disable avformat" OFF)
option(DISABLE_FFPLAY "Disable ffplay" OFF)
option(DISABLE_FFMPEG "Disable ffmpeg" OFF)
option(DISABLE_ASM "Disable all assembly optimizations" OFF)
option(ENABLE_FREIOR "Enable Frei0r" OFF)

#set(LIBRARY_TYPE "STATIC")
set(LIBRARY_TYPE "SHARED")
if (${LIBRARY_TYPE} STREQUAL "SHARED")
    set(CMAKE_WINDOWS_EXPORT_ALL_SYMBOLS TRUE)
endif ()

set(FFMPEG_CONFIGURATION "")
string(TIMESTAMP CONFIG_THIS_YEAR "%Y")
set(FFMPEG_DATADIR "")
set(AVCONV_DATADIR "")
set(RESTRICT "")
set(BIG_ENDIAN 0)
set(FAST_UNALIGNED 0)
set(NASM_PATH "")
set(EXTERN_PREFIX "")

include(FindZLIB)
set(HAS_ZLIB ZLIB_FOUND)

# detect this from presence of avx
set(EXTERNAL_XOP 1)

set(CONFIG_NAMES NETWORK
    AVCODEC
    AVUTIL
    AVFORMAT
    AVDEVICE
    AVFILTER
    AVRESAMPLE
    SWSCALE
    SWRESAMPLE
    POSTPROC
    MEMORY_POISONING
    FTRAPV
    ZLIB
    SMALL
    ME_CMP
    GRAY
    RTPENC_CHAIN
    SWSCALE_ALPHA
    FRAME_THREAD_ENCODER
    LIBMP3LAME
    LIBVORBIS
    MEDIACODEC
    V4L2_M2M
    AMF
    NVENC
    MPEG2_XVMC_HWACCEL
    MPEG1_XVMC_HWACCEL
    VAAPI_ENCODE
    VAAPI
    AV1_VAAPI_HWACCEL
    H263_VAAPI_HWACCEL
    H264_VAAPI_HWACCEL
    HEVC_VAAPI_HWACCEL
    MPEG2_VAAPI_HWACCEL
    MPEG4_VAAPI_HWACCEL
    VC1_VAAPI_HWACCEL
    VP8_VAAPI_HWACCEL
    VP9_VAAPI_HWACCEL
    D3D11VA
    AV1_D3D11VA_HWACCEL
    H264_D3D11VA_HWACCEL
    HEVC_D3D11VA_HWACCEL
    MPEG2_D3D11VA_HWACCEL
    VC1_D3D11VA_HWACCEL
    VP9_D3D11VA_HWACCEL
    DXVA2
    AV1_DXVA2_HWACCEL
    H264_DXVA2_HWACCEL
    HEVC_DXVA2_HWACCEL
    MPEG2_DXVA2_HWACCEL
    VC1_DXVA2_HWACCEL
    VP9_DXVA2_HWACCEL
    NVDEC
    AV1_NVDEC_HWACCEL
    H264_NVDEC_HWACCEL
    HEVC_NVDEC_HWACCEL
    MPEG1_NVDEC_HWACCEL
    MPEG2_NVDEC_HWACCEL
    MPEG4_NVDEC_HWACCEL
    VC1_NVDEC_HWACCEL
    VP8_NVDEC_HWACCEL
    VP9_NVDEC_HWACCEL
    ZLIB_DECODER
    H264_VIDEOTOOLBOX_ENCODER
    VIDEOTOOLBOX
    H263_VIDEOTOOLBOX_HWACCEL
    H264_VIDEOTOOLBOX_HWACCEL
    MPEG1_VIDEOTOOLBOX_HWACCEL
    MPEG2_VIDEOTOOLBOX_HWACCEL
    MPEG4_VIDEOTOOLBOX_HWACCEL
    HEVC_VIDEOTOOLBOX_HWACCEL
    VDPAU
    H264_VDPAU_HWACCEL
    HEVC_VDPAU_HWACCEL
    MPEG1_VDPAU_HWACCEL
    MPEG2_VDPAU_HWACCEL
    MPEG4_VDPAU_HWACCEL
    VC1_VDPAU_HWACCEL
    VP9_VDPAU_HWACCEL
    ERROR_RESILIENCE
    XVMC
    MPEGVIDEO
    QSV
    QSVDEC
    QSVENC
    H264_QSV_HWACCEL
    HEVC_QSV_HWACCEL
    MPEG2_QSV_HWACCEL
    VC1_QSV_HWACCEL
    VP8_QSV_HWACCEL
    OPENSSL
    LIBRTMP
    MPEGVIDEOENC
    CRYSTALHD
    RIFFENC
    EXIF
    H264PARSE
    MPEGAUDIO
    MPEGAUDIOHEADER
    MPEGAUDIODSP
    CBS
    CBS_H264
    CBS_H265
    CBS_MPEG2
    ADTS_HEADER
    JPEGTABLES
    IDCTDSP
    GOLOMB
    FDCTDSP
    AANDCTTABLES
    LPC
    BSWAPDSP
    HPELDSP
    BLOCKDSP
    PIXBLOCKDSP
    QPELDSP
    LZO
    TEXTUREDSP
    VIDEODSP
    DVPROFILE
    LZF
    RANGECODER
    HUFFMAN
    HUFFYUVDSP
    HUFFYUVENCDSP
    LLVIDENCDSP
    LLVIDDSP
    MPEG_ER
    H263DSP
    HEVCPARSE
    CABAC
    IVIDSP
    MSS34DSP
    VC1DSP
    H264DSP
    H264PRED
    H264QPEL
    H264CHROMA
    TPELDSP
    VP3DSP
    INTRAX8
    VP5DSP
    VP56DSP
    VP6DSP
    VP7DSP
    VP78DSP
    VP8DSP
    AUDIO_FRAME_QUEUE
    MDCT
    SINEWIN
    MDCT15
    FMTCONVERT
    AC3DSP
    LLAUDSP
    WMA_FREQS
    RDFT
    DCT
    AUDIODSP
    FLACDSP
    FFT
    MPADSP
    GPL
    LLAUDDSP
    STARTCODE
    IIRFILTER
    RV34DSP
    SCENE_SAD
    SAFE_BITSTREAM_READER
    RUNTIME_CPUDETECT
)
create_config_variables("${CONFIG_NAMES}")

set(CONFIG_OPENSSL 0)
if (CONFIG_OPENSSL)
    find_package(OpenSSL REQUIRED)
endif ()

set(EXTRA_CONFIG_NAMES ATSC_A53 RTPDEC)
create_config_variables("${EXTRA_CONFIG_NAMES}")

# disable stuff that is off by default
set(CONFIG_SMALL 0)
set(CONFIG_GRAY 0)
set(CONFIG_LIBMP3LAME 0)
set(CONFIG_LIBVORBIS 0)
set(CONFIG_MEDIACODEC 0)
set(CONFIG_V4L2_M2M 0)
set(CONFIG_AMF 0)
set(CONFIG_NVENC 0)
set(CONFIG_MPEG2_XVMC_HWACCEL 0)
set(CONFIG_MPEG1_XVMC_HWACCEL 0)
set(CONFIG_VAAPI_ENCODE 0)
set(CONFIG_VAAPI 0)
set(CONFIG_AV1_VAAPI_HWACCEL 0)
set(CONFIG_H263_VAAPI_HWACCEL 0)
set(CONFIG_H264_VAAPI_HWACCEL 0)
set(CONFIG_HEVC_VAAPI_HWACCEL 0)
set(CONFIG_MPEG2_VAAPI_HWACCEL 0)
set(CONFIG_MPEG4_VAAPI_HWACCEL 0)
set(CONFIG_VC1_VAAPI_HWACCEL 0)
set(CONFIG_VP8_VAAPI_HWACCEL 0)
set(CONFIG_VP9_VAAPI_HWACCEL 0)
set(CONFIG_D3D11VA 0)
set(CONFIG_AV1_D3D11VA_HWACCEL 0)
set(CONFIG_H264_D3D11VA_HWACCEL 0)
set(CONFIG_HEVC_D3D11VA_HWACCEL 0)
set(CONFIG_MPEG2_D3D11VA_HWACCEL 0)
set(CONFIG_VC1_D3D11VA_HWACCEL 0)
set(CONFIG_VP9_D3D11VA_HWACCEL 0)
set(CONFIG_DXVA2 0)
set(CONFIG_AV1_DXVA2_HWACCEL 0)
set(CONFIG_H264_DXVA2_HWACCEL 0)
set(CONFIG_HEVC_DXVA2_HWACCEL 0)
set(CONFIG_MPEG2_DXVA2_HWACCEL 0)
set(CONFIG_VC1_DXVA2_HWACCEL 0)
set(CONFIG_VP9_DXVA2_HWACCEL 0)
set(CONFIG_NVDEC 0)
set(CONFIG_AV1_NVDEC_HWACCEL 0)
set(CONFIG_H264_NVDEC_HWACCEL 0)
set(CONFIG_HEVC_NVDEC_HWACCEL 0)
set(CONFIG_MPEG1_NVDEC_HWACCEL 0)
set(CONFIG_MPEG2_NVDEC_HWACCEL 0)
set(CONFIG_MPEG4_NVDEC_HWACCEL 0)
set(CONFIG_VC1_NVDEC_HWACCEL 0)
set(CONFIG_VP8_NVDEC_HWACCEL 0)
set(CONFIG_VP9_NVDEC_HWACCEL 0)
set(CONFIG_VIDEOTOOLBOX 0)
set(CONFIG_H263_VIDEOTOOLBOX_HWACCEL 0)
set(CONFIG_H264_VIDEOTOOLBOX_HWACCEL 0)
set(CONFIG_MPEG1_VIDEOTOOLBOX_HWACCEL 0)
set(CONFIG_MPEG2_VIDEOTOOLBOX_HWACCEL 0)
set(CONFIG_MPEG4_VIDEOTOOLBOX_HWACCEL 0)
set(CONFIG_HEVC_VIDEOTOOLBOX_HWACCEL 0)
set(CONFIG_VDPAU 0)
set(CONFIG_H264_VDPAU_HWACCEL 0)
set(CONFIG_HEVC_VDPAU_HWACCEL 0)
set(CONFIG_MPEG1_VDPAU_HWACCEL 0)
set(CONFIG_MPEG2_VDPAU_HWACCEL 0)
set(CONFIG_MPEG4_VDPAU_HWACCEL 0)
set(CONFIG_VC1_VDPAU_HWACCEL 0)
set(CONFIG_VP9_VDPAU_HWACCEL 0)
set(CONFIG_XVMC 0)
set(CONFIG_QSV 0)
set(CONFIG_QSVDEC 0)
set(CONFIG_QSVENC 0)
set(CONFIG_H264_QSV_HWACCEL 0)
set(CONFIG_HEVC_QSV_HWACCEL 0)
set(CONFIG_MPEG2_QSV_HWACCEL 0)
set(CONFIG_VC1_QSV_HWACCEL 0)
set(CONFIG_VP8_QSV_HWACCEL 0)
set(CONFIG_LIBRTMP 0)
set(CONFIG_CRYSTALHD 0)

if (WIN32)
    set(CONFIG_D3D11VA 1)
    set(CONFIG_AV1_D3D11VA_HWACCEL 0)
    set(CONFIG_H264_D3D11VA_HWACCEL 1)
    set(CONFIG_HEVC_D3D11VA_HWACCEL 1)
    set(CONFIG_MPEG2_D3D11VA_HWACCEL 1)
    set(CONFIG_VC1_D3D11VA_HWACCEL 1)
    set(CONFIG_VP9_D3D11VA_HWACCEL 1)
    set(CONFIG_DXVA2 1)
    set(CONFIG_AV1_DXVA2_HWACCEL 0)
    set(CONFIG_H264_DXVA2_HWACCEL 1)
    set(CONFIG_HEVC_DXVA2_HWACCEL 1)
    set(CONFIG_MPEG2_DXVA2_HWACCEL 1)
    set(CONFIG_VC1_DXVA2_HWACCEL 1)
    set(CONFIG_VP9_DXVA2_HWACCEL 1)
    set(HAS_MFT 1)
endif ()

set(ARCHITECTURE_NAMES AARCH64 ALPHA ARM AVR32 AVR32 AVR32_AP AVR32_UC BFIN IA64 M68K MIPS MIPS64 PARISC PPC PPC64 S390 SH4 SPARC SPARC64 TILEGX TILEPRO TOMI X86 X86_32 X86_64)

# muxers
find_things_extern(muxer AVOutputFormat libavformat/allformats.c MUXER_NAMES)
# chromaprint muxer requires chromaprint.h
set(CONFIG_CHROMAPRINT_MUXER 0)
set(CONFIG_CODEC2_MUXER 0)
set(CONFIG_CODEC2RAW_MUXER 0)

print_enabled_components(libavformat/muxer_list.c AVOutputFormat muxer_list "${MUXER_NAMES}")

# demuxers
find_things_extern(demuxer AVInputFormat libavformat/allformats.c DEMUXER_NAMES)

set(CONFIG_VAPOURSYNTH_DEMUXER 0)
set(CONFIG_CODEC2_DEMUXER 0)
set(CONFIG_CODEC2RAW_DEMUXER 0)
set(CONFIG_AVISYNTH_DEMUXER 0)

include(FindLibXml2)
set(HAS_LIBXML LibXml2_FOUND)
if (NOT HAS_LIBXML)
    # dash demuxer pulls in libxml
    set(CONFIG_DASH_DEMUXER 0)
endif ()

if (NOT ENABLE_LIBGME)
    # libgme demuxer pulls in libgme
    set(CONFIG_LIBGME_DEMUXER 0)
endif ()

if (NOT ENABLE_LIBMODPLUG)
    # libmodplug demuxer pulls in libmodplug
    set(CONFIG_LIBMODPLUG_DEMUXER 0)
endif ()

if (NOT ENABLE_LIBOPENMPT)
    # libopenmpt demuxer requires libopenmpt
    set(CONFIG_LIBOPENMPT_DEMUXER 0)
endif ()

print_enabled_components(libavformat/demuxer_list.c AVInputFormat demuxer_list "${DEMUXER_NAMES}")

# encoders
find_things_extern(encoder AVCodec libavcodec/allcodecs.c ENCODER_NAMES)

# disable everything that relies on external libraries or hw acceleration and add support for detection
set(CONFIG_QSVENC 0)
set(CONFIG_H264_QSV_ENCODER 0)
set(CONFIG_HEVC_QSV_ENCODER 0)
set(CONFIG_MJPEG_QSV_ENCODER 0)
set(CONFIG_MPEG2_QSV_ENCODER 0)
set(CONFIG_LIBVPX_VP8_ENCODER 0)
set(CONFIG_LIBVPX_VP9_ENCODER 0)
set(CONFIG_LIBSHINE_ENCODER 0)
set(CONFIG_LIBXVID_ENCODER 0)
set(CONFIG_H263_V4L2M2M_ENCODER 0)
set(CONFIG_H264_V4L2M2M_ENCODER 0)
set(CONFIG_HEVC_V4L2M2M_ENCODER 0)
set(CONFIG_MPEG4_V4L2M2M_ENCODER 0)
set(CONFIG_VP8_V4L2M2M_ENCODER 0)
set(CONFIG_H264_AMF_ENCODER 0)
set(CONFIG_HEVC_AMF_ENCODER 0)
set(CONFIG_H264_NVENC_ENCODER 0)
set(CONFIG_NVENC_ENCODER 0)
set(CONFIG_NVENC_H264_ENCODER 0)
set(CONFIG_HEVC_NVENC_ENCODER 0)
set(CONFIG_NVENC_HEVC_ENCODER 0)
set(CONFIG_LIBOPENJPEG_ENCODER 0)
set(CONFIG_H264_VAAPI_ENCODER 0)
set(CONFIG_HEVC_VAAPI_ENCODER 0)
set(CONFIG_MJPEG_VAAPI_ENCODER 0)
set(CONFIG_MPEG2_VAAPI_ENCODER 0)
set(CONFIG_VP8_VAAPI_ENCODER 0)
set(CONFIG_VP9_VAAPI_ENCODER 0)
set(CONFIG_LIBOPENCORE_AMRNB_ENCODER 0)
set(CONFIG_LIBOPENH264_ENCODER 0)
set(CONFIG_LIBOPUS_ENCODER 0)
set(CONFIG_LIBGSM_ENCODER 0)
set(CONFIG_LIBGSM_MS_ENCODER 0)
set(CONFIG_H264_OMX_ENCODER 0)
set(CONFIG_MPEG4_OMX_ENCODER 0)
set(CONFIG_LIBX262_ENCODER 0)
set(CONFIG_LIBX264_ENCODER 0)
set(CONFIG_LIBX264RGB_ENCODER 0)
set(CONFIG_LIBX265_ENCODER 0)
set(CONFIG_AAC_AT_ENCODER 0)
set(CONFIG_ALAC_AT_ENCODER 0)
set(CONFIG_ILBC_AT_ENCODER 0)
set(CONFIG_PCM_ALAW_AT_ENCODER 0)
set(CONFIG_PCM_MULAW_AT_ENCODER 0)
set(CONFIG_LIBWAVPACK_ENCODER 0)
set(CONFIG_H264_VIDEOTOOLBOX_ENCODER 0)
set(CONFIG_HEVC_VIDEOTOOLBOX_ENCODER 0)
set(CONFIG_LIBXAVS_ENCODER 0)
set(CONFIG_LIBSPEEX_ENCODER 0)
set(CONFIG_LIBVORBIS_ENCODER 0)
set(CONFIG_LIBTWOLAME_ENCODER 0)
set(CONFIG_LIBWEBP_ENCODER 0)
set(CONFIG_LIBWEBP_ANIM_ENCODER 0)
set(CONFIG_LIBMP3LAME_ENCODER 0)
set(CONFIG_LIBVO_AMRWBENC_ENCODER 0)
set(CONFIG_FLASHSV_ENCODER 0)
set(CONFIG_FLASHSV2_ENCODER 0)
set(CONFIG_LIBILBC_ENCODER 0)
set(CONFIG_LIBKVAZAAR_ENCODER 0)
set(CONFIG_H264_QSV_ENCODER 0)
set(CONFIG_HEVC_QSV_ENCODER 0)
set(CONFIG_MJPEG_QSV_ENCODER 0)
set(CONFIG_MPEG2_QSV_ENCODER 0)
set(CONFIG_VP9_QSV_ENCODER 0)
set(CONFIG_APNG_ENCODER 0)
set(CONFIG_PNG_ENCODER 0)
set(CONFIG_ZMBV_ENCODER 0)
set(CONFIG_HAP_ENCODER 0)
set(CONFIG_LIBAOM_AV1_ENCODER 0)
set(CONFIG_LIBRAV1E_ENCODER 0)
set(CONFIG_LIBCODEC2_ENCODER 0)
set(CONFIG_LIBXAVS2_ENCODER 0)
set(CONFIG_LIBSVTAV1_ENCODER 0)

if (NOT ENABLE_LIBTHEORA)
    set(CONFIG_LIBTHEORA_ENCODER 0)
endif ()

if (NOT ENABLE_LIBFDK_AAC)
    set(CONFIG_LIBFDK_AAC_ENCODER 0)
endif ()

if (NOT HAS_ZLIB)
    set(CONFIG_TIFF_ENCODER 0)
    set(CONFIG_ZLIB_ENCODER 0)
endif ()

if (NOT WIN32)
    set(CONFIG_AAC_MF_ENCODER 0)
    set(CONFIG_AC3_MF_ENCODER 0)
    set(CONFIG_H264_MF_ENCODER 0)
    set(CONFIG_HEVC_MF_ENCODER 0)
    set(CONFIG_MP3_MF_ENCODER 0)
endif ()

# decoders
find_things_extern(decoder AVCodec libavcodec/allcodecs.c DECODER_NAMES)

# disable everything that relies on external libraries or hw acceleration and add support for detection
set(CONFIG_H264_MEDIACODEC_DECODER 0)
set(CONFIG_HEVC_MEDIACODEC_DECODER 0)
set(CONFIG_MPEG2_MEDIACODEC_DECODER 0)
set(CONFIG_MPEG4_MEDIACODEC_DECODER 0)
set(CONFIG_VP8_MEDIACODEC_DECODER 0)
set(CONFIG_VP9_MEDIACODEC_DECODER 0)
set(CONFIG_LIBVPX_VP9_DECODER 0)
set(CONFIG_LIBVPX_VP8_DECODER 0)
set(CONFIG_WEBP_DECODER 0)
set(CONFIG_H263_V4L2M2M_DECODER 0)
set(CONFIG_H264_V4L2M2M_DECODER 0)
set(CONFIG_HEVC_V4L2M2M_DECODER 0)
set(CONFIG_MPEG1_V4L2M2M_DECODER 0)
set(CONFIG_MPEG2_V4L2M2M_DECODER 0)
set(CONFIG_MPEG4_V4L2M2M_DECODER 0)
set(CONFIG_VC1_V4L2M2M_DECODER 0)
set(CONFIG_VP8_V4L2M2M_DECODER 0)
set(CONFIG_VP9_V4L2M2M_DECODER 0)
set(CONFIG_LIBRSVG_DECODER 0)
set(CONFIG_H264_CUVID_DECODER 0)
set(CONFIG_HEVC_CUVID_DECODER 0)
set(CONFIG_MJPEG_CUVID_DECODER 0)
set(CONFIG_MPEG1_CUVID_DECODER 0)
set(CONFIG_MPEG2_CUVID_DECODER 0)
set(CONFIG_MPEG4_CUVID_DECODER 0)
set(CONFIG_VC1_CUVID_DECODER 0)
set(CONFIG_VP8_CUVID_DECODER 0)
set(CONFIG_VP9_CUVID_DECODER 0)
set(CONFIG_AV1_CUVID_DECODER 0)
set(CONFIG_LIBOPENJPEG_DECODER 0)
set(CONFIG_G2M_DECODER 0)
set(CONFIG_LIBOPENCORE_AMRNB_DECODER 0)
set(CONFIG_LIBOPENCORE_AMRWB_DECODER 0)
set(CONFIG_LIBOPENH264_DECODER 0)
set(CONFIG_H264_RKMPP_DECODER 0)
set(CONFIG_HEVC_RKMPP_DECODER 0)
set(CONFIG_VP8_RKMPP_DECODER 0)
set(CONFIG_VP9_RKMPP_DECODER 0)
set(CONFIG_LIBOPUS_DECODER 0)
set(CONFIG_LIBGSM_DECODER 0)
set(CONFIG_LIBGSM_MS_DECODER 0)
set(CONFIG_LIBCELT_DECODER 0)
set(CONFIG_AAC_AT_DECODER 0)
set(CONFIG_AC3_AT_DECODER 0)
set(CONFIG_ADPCM_IMA_QT_AT_DECODER 0)
set(CONFIG_ALAC_AT_DECODER 0)
set(CONFIG_AMR_NB_AT_DECODER 0)
set(CONFIG_EAC3_AT_DECODER 0)
set(CONFIG_GSM_MS_AT_DECODER 0)
set(CONFIG_ILBC_AT_DECODER 0)
set(CONFIG_MP1_AT_DECODER 0)
set(CONFIG_MP2_AT_DECODER 0)
set(CONFIG_MP3_AT_DECODER 0)
set(CONFIG_PCM_MULAW_AT_DECODER 0)
set(CONFIG_PCM_ALAW_AT_DECODER 0)
set(CONFIG_QDMC_AT_DECODER 0)
set(CONFIG_QDM2_AT_DECODER 0)
set(CONFIG_LIBZVBI_TELETEXT_DECODER 0)
set(CONFIG_LIBSPEEX_DECODER 0)
set(CONFIG_LIBVORBIS_DECODER 0)
set(CONFIG_H264_MMAL_DECODER 0)
set(CONFIG_MPEG2_MMAL_DECODER 0)
set(CONFIG_MPEG4_MMAL_DECODER 0)
set(CONFIG_VC1_MMAL_DECODER 0)
set(CONFIG_FLASHSV_DECODER 0)
set(CONFIG_FLASHSV2_DECODER 0)
set(CONFIG_LIBILBC_DECODER 0)
set(CONFIG_AV1_QSV_DECODER 0)
set(CONFIG_H264_QSV_DECODER 0)
set(CONFIG_HEVC_QSV_DECODER 0)
set(CONFIG_MJPEG_QSV_DECODER 0)
set(CONFIG_MPEG2_QSV_DECODER 0)
set(CONFIG_VC1_QSV_DECODER 0)
set(CONFIG_VP8_QSV_DECODER 0)
set(CONFIG_VP9_QSV_DECODER 0)
set(CONFIG_ZMBV_DECODER 0)
set(CONFIG_HAP_DECODER 0)
set(CONFIG_LIBCODEC2_DECODER 0)
set(CONFIG_LIBAOM_AV1_DECODER 0)
set(CONFIG_LIBARIBB24_DECODER 0)
set(CONFIG_LIBDAV1D_DECODER 0)
set(CONFIG_LIBDAVS2_DECODER 0)
set(CONFIG_LIBUAVS3D_DECODER 0)
if (${CONFIG_CRYSTALHD} EQUAL 0)
    set(CONFIG_H264_CRYSTALHD_DECODER 0)
    set(CONFIG_MPEG2_CRYSTALHD_DECODER 0)
    set(CONFIG_MPEG4_CRYSTALHD_DECODER 0)
    set(CONFIG_MSMPEG4_CRYSTALHD_DECODER 0)
    set(CONFIG_VC1_CRYSTALHD_DECODER 0)
    set(CONFIG_WMV3_CRYSTALHD_DECODER 0)
endif ()

if (NOT ENABLE_LIBFDK_AAC)
    set(CONFIG_LIBFDK_AAC_DECODER 0)
endif ()

if (NOT HAS_ZLIB)
    set(CONFIG_DXA_DECODER 0)
    set(CONFIG_SCREENPRESSO_DECODER 0)
    set(CONFIG_TSCC_DECODER 0)
    set(CONFIG_RSCC_DECODER 0)
    set(CONFIG_ZLIB_DECODER 0)
    set(CONFIG_MSCC_DECODER 0)
    set(CONFIG_SRGC_DECODER 0)
    set(CONFIG_EXR_DECODER 0)
    set(CONFIG_ZEROCODEC_DECODER 0)
    set(CONFIG_APNG_DECODER 0)
    set(CONFIG_PNG_DECODER 0)
    set(CONFIG_TDSC_DECODER 0)
    set(CONFIG_LSCR_DECODER 0)
    set(CONFIG_MVHA_DECODER 0)
    set(CONFIG_MWSC_DECODER 0)
    set(CONFIG_RASC_DECODER 0)
    set(CONFIG_WCMV_DECODER 0)
    set(CONFIG_TIFF_DECODER 0)
    set(CONFIG_SVQ3_DECODER 0)
    set(CONFIG_CSCD_DECODER 0)
endif ()

if (NOT WIN32)
    set(CONFIG_AAC_MF_DECODER 0)
    set(CONFIG_AC3_MF_DECODER 0)
    set(CONFIG_H264_MF_DECODER 0)
    set(CONFIG_HEVC_MF_DECODER 0)
    set(CONFIG_MP3_MF_DECODER 0)
endif ()

# print all codecs
print_enabled_components(libavcodec/codec_list.c AVCodec codec_list "${ENCODER_NAMES};${DECODER_NAMES}")

# parsers
find_things_extern(parser AVCodecParser libavcodec/parsers.c PARSER_NAMES)
print_enabled_components(libavcodec/parser_list.c AVCodecParser parser_list "${PARSER_NAMES}")

# filters 
find_filters_extern(libavfilter/allfilters.c FILTER_NAMES)
set(CONFIG_ASR_FILTER 0)
set(CONFIG_CHROMABER_VULKAN_FILTER 0)
set(CONFIG_AVGBLUR_VULKAN_FILTER 0)
set(CONFIG_OVERLAY_VULKAN_FILTER 0)
set(CONFIG_SCALE_VULKAN_FILTER 0)
if (NOT APPLE)
    set(CONFIG_COREIMAGE_FILTER 0)
    set(CONFIG_COREIMAGESRC_FILTER 0)
endif ()
if (NOT ENABLE_FREIOR)
    set(CONFIG_FREI0R_SRC_FILTER 0)
    set(CONFIG_FREI0R_FILTER 0)
endif ()
if (NOT LINUX)
    set(CONFIG_LADSPA_FILTER 0)
endif ()
if (NOT ENABLE_VAAPI)
    set(CONFIG_DEINTERLACE_VAAPI_FILTER 0)
    set(CONFIG_SCALE_VAAPI_FILTER 0)
    set(CONFIG_DENOISE_VAAPI_FILTER 0)
    set(CONFIG_PROCAMP_VAAPI_FILTER 0)
    set(CONFIG_SHARPNESS_VAAPI_FILTER 0)
    set(CONFIG_TONEMAP_VAAPI_FILTER 0)
    set(CONFIG_TRANSPOSE_VAAPI_FILTER 0)
endif ()
if (NOT ENABLE_VID_STAB)
    set(CONFIG_VIDSTABDETECT_FILTER 0)
    set(CONFIG_VIDSTABTRANSFORM_FILTER 0)
endif ()
if (NOT ENABLE_FLITE)
    set(CONFIG_FLITE_FILTER 0)
endif ()
if (NOT ENABLE_ZIMG)
    set(CONFIG_ZSCALE_FILTER 0)
endif ()
if (NOT ENABLE_TESSERACT)
    set(CONFIG_OCR_FILTER 0)
endif ()
if (NOT ENABLE_OPENCV)
    set(CONFIG_OCV_FILTER 0)
endif ()
if (NOT ENABLE_ZMQ)
    set(CONFIG_ZMQ_FILTER 0)
    set(CONFIG_AZMQ_FILTER 0)
endif ()
if (NOT ENABLE_QSV)
    set(CONFIG_DEINTERLACE_QSV_FILTER 0)
    set(CONFIG_OVERLAY_QSV_FILTER 0)
    set(CONFIG_SCALE_QSV_FILTER 0)
    set(CONFIG_VPP_QSV_FILTER 0)
endif ()
if (NOT ENABLE_LIBASS)
    set(CONFIG_ASS_FILTER 0)
    set(CONFIG_SUBTITLES_FILTER 0)
endif ()
if (NOT ENABLE_LIBLILV)
    set(CONFIG_LV2_FILTER 0)
endif ()
if (NOT ENABLE_PTHREAD)
    set(CONFIG_LIBVMAF_FILTER 0)
endif ()
if (NOT ENABLE_LIBRUBBERBAND)
    set(CONFIG_RUBBERBAND_FILTER 0)
endif ()
if (NOT ENABLE_LIBFREETYPE)
    set(CONFIG_DRAWTEXT_FILTER 0)
endif ()
if (NOT ENABLE_NPPI)
    set(CONFIG_SCALE_NPP_FILTER 0)
    set(CONFIG_TRANSPOSE_NPP_FILTER 0)
endif ()
if (NOT ENABLE_BS2B)
    set(CONFIG_BS2B_FILTER 0)
endif ()
if (NOT ENABLE_LIBMYSOFA)
    set(CONFIG_SOFALIZER_FILTER 0)
endif ()
set(CONFIG_OVERLAY_OPENCL_FILTER 0)
set(CONFIG_UNSHARP_OPENCL_FILTER 0)
set(CONFIG_BOXBLUR_OPENCL_FILTER 0)
set(CONFIG_COLORKEY_OPENCL_FILTER 0)
set(CONFIG_AVGBLUR_OPENCL_FILTER 0)
set(CONFIG_CONVOLUTION_OPENCL_FILTER 0)
set(CONFIG_DESHAKE_OPENCL_FILTER 0)
set(CONFIG_DILATION_OPENCL_FILTER 0)
set(CONFIG_EROSION_OPENCL_FILTER 0)
set(CONFIG_NLMEANS_OPENCL_FILTER 0)
set(CONFIG_OVERLAY_OPENCL_FILTER 0)
set(CONFIG_ROBERTS_OPENCL_FILTER 0)
set(CONFIG_PROGRAM_OPENCL_FILTER 0)
set(CONFIG_PREWITT_OPENCL_FILTER 0)
set(CONFIG_PAD_OPENCL_FILTER 0)
set(CONFIG_SOBEL_OPENCL_FILTER)
set(CONFIG_TONEMAP_OPENCL_FILTER 0)
set(CONFIG_TRANSPOSE_OPENCL_FILTER 0)
set(CONFIG_XFADE_OPENCL_FILTER 0)
set(CONFIG_OPENCLSRC_FILTER 0)
set(CONFIG_OVERLAY_CUDA_FILTER 0)
set(CONFIG_SCALE_CUDA_FILTER 0)
set(CONFIG_THUMBNAIL_CUDA_FILTER 0)
set(CONFIG_YADIF_CUDA_FILTER 0)
set(CONFIG_LENSFUN_FILTER 0)
if (NOT ENABLE_DNN)
    set(CONFIG_DERAIN_FILTER 0)
    set(CONFIG_SR_FILTER 0)
    set(CONFIG_DNN_PROCESSING_FILTER 0)
endif ()

print_enabled_components(libavfilter/filter_list.c AVFilter filter_list "${FILTER_NAMES}")

# output devices
find_things_extern(muxer AVOutputFormat libavdevice/alldevices.c OUTPUT_DEVICE_NAMES outdev)

# input devices
find_things_extern(demuxer AVInputFormat libavdevice/alldevices.c INPUT_DEVICE_NAMES indev)


# check what has been turned off
if (DISABLE_NETWORK)
    set(CONFIG_NETWORK 0)
endif (DISABLE_NETWORK)

if (DISABLE_AVCODEC)
    set(CONFIG_AVCODEC 0)
endif (DISABLE_AVCODEC)

if (DISABLE_AVUTIL)
    set(CONFIG_AVUTIL 0)
endif (DISABLE_AVUTIL)

if (DISABLE_AVFORMAT)
    set(CONFIG_AVFORMAT 0)
endif (DISABLE_AVFORMAT)

# for now these values are hardcoded, add detection as needed
set(HAVE_NAMES STRUCT_POLLFD  
    STRUCT_SOCKADDR_STORAGE
    STRUCT_ADDRINFO
    ISNAN
    ISFINITE
    THREADS
    WINSOCK2_H
    W32THREADS
    ALTIVEC
    NEON
    INLINE_ASM
    MMX
    MMX_INLINE
    MMX_EXTERNAL
    MMXEXT_INLINE
    MMXEXT_EXTERNAL
    AMD3DNOW_INLINE
    AMD3DNOW_EXTERNAL
    AMD3DNOWEXT_EXTERNAL
    X86ASM
    SSE_EXTERNAL
    SSE2_INLINE
    SSE2_EXTERNAL
    SSE3_EXTERNAL
    SSSE3
    SSSE3_EXTERNAL
    SSE4_EXTERNAL
    AVX_INLINE
    AVX_EXTERNAL
    AVX2_EXTERNAL
    FMA3_EXTERNAL
    FMA4_EXTERNAL
    LIBC_MSVCRT
    MIPSFPU
    DXVA_H
    FAST_64BIT
    INTRINSICS_NEON
    MIPSDSP
    INLINE_ASM_DIRECT_SYMBOL_REFS
    PTHREAD_CANCEL
    ALIGNED_STACK
    GMTIME_R
    LOCALTIME_R
    SOCKLEN_T
    XOP_EXTERNAL
    CPUNOP
    EBX_AVAILABLE
    EBP_AVAILABLE
    DOS_PATHS
    CLOSESOCKET
    FAST_CLZ
    UNISTD_H
    PTHREADS
    POLL_H
    OPENGL_GL3_H
)

create_variables(HAVE "${HAVE_NAMES}")

# detect headers
check_header(PTHREADS "pthread.h")
check_header(POLL_H "poll.h")
check_header(OPENGL_GL3_H "OpenGL/gl3.h")

# If asm is disabled then external asm support is not available
if (DISABLE_ASM)
    set(HAVE_AMD3DNOW_EXTERNAL 0)
    set(HAVE_AMD3DNOWEXT_EXTERNAL 0)
    set(HAVE_AVX_EXTERNAL 0)
    set(HAVE_AVX2_EXTERNAL 0)
    set(HAVE_FMA3_EXTERNAL 0)
    set(HAVE_FMA4_EXTERNAL 0)
    set(HAVE_MMXEXT_EXTERNAL 0)
    set(HAVE_MMX_EXTERNAL 0)
    set(HAVE_MMXEXT_EXTERNAL 0)
    set(HAVE_SSE_EXTERNAL 0)
    set(HAVE_SSE2_EXTERNAL 0)
    set(HAVE_SSE3_EXTERNAL 0)
    set(HAVE_SSE4_EXTERNAL 0)
    set(HAVE_SSSE3_EXTERNAL 0)
    set(HAVE_X86ASM 0)
    set(HAVE_XOP_EXTERNAL 0)
    set(EXTERNAL_XOP 0)
endif ()

set(HAVE_WINSOCK2_H 0)
set(HAVE_W32THREADS 0)
set(HAVE_ALTIVEC 0)
set(HAVE_NEON 0)
set(HAVE_MMX_INLINE 0)
set(HAVE_AMD3DNOW_INLINE 0)
set(HAVE_INLINE_ASM 0)
set(HAVE_X86ASM 0)
set(HAVE_LIBC_MSVCRT 0)
set(HAVE_MIPSFPU 0)
set(HAVE_DXVA_H 0)
set(HAVE_FAST_64BIT 0)
set(HAVE_INTRINSICS_NEON 0)
set(HAVE_MIPSDSP 0)
set(HAVE_INLINE_ASM_DIRECT_SYMBOL_REFS 0)
set(HAVE_ALIGNED_STACK 0)
set(HAVE_FMA4_EXTERNAL 0)
set(HAVE_CPUNOP 0)
set(HAVE_EBX_AVAILABLE 0)
set(HAVE_CLOSESOCKET 0)

# math functions and math function detection
set(MATH_FUNCTIONS atanf
    atan2f
    cbrt
    cbrtf
    copysign
    cosf
    erf
    exp2
    exp2f
    expf
    hypot
    isfinite
    isinf
    isnan
    ldexpf
    llrint
    llrintf
    log2
    log2f
    log10f
    lrint
    lrintf
    powf
    rint
    round
    roundf
    sinf
    trunc
    truncf
)

set(ATAN2F_ARGS "f, g")
set(COPYSIGN_ARGS "f, g")
set(HYPOT_ARGS "f, g")
set(LDEXPF_ARGS "f, g")
set(POWF_ARGS "f, g")
foreach (MATH_FUNCTION ${MATH_FUNCTIONS})
    check_math_function(${MATH_FUNCTION})
    list(APPEND HAVE_NAMES ${MATH_FUNCTION_NAME_UPPER})
endforeach (MATH_FUNCTION)

# asm feature detection
file(WRITE ${CMAKE_BINARY_DIR}/feature_tests/test_mmxext.c "int main()\n"
    "{\n"
    "#if defined(_MSC_VER) && !defined(__clang__)\n"
    "   __asm pmaxub mm0, mm1;\n"
    "#else\n"
    "   __asm__ __volatile__(\"pmaxub %mm0, %mm1\");\n"
    "#endif\n"
    "}\n"
)

file(WRITE ${CMAKE_BINARY_DIR}/feature_tests/test_extern_symbol.c "int test = 0;\n")
file(WRITE ${CMAKE_BINARY_DIR}/feature_tests/test_inline_asm_direct_symbol_refs_1.c "int main()\n"
    "{\n"
    "#if defined(_MSC_VER) && !defined(__clang__)\n"
    "   extern int test;\n"
    "   __asm mov test, eax\n" 
    "#else\n"
    "   __asm__ __volatile__(\"movl ${EXTERN_PREFIX}test, %eax\");\n"
    "#endif\n"
    "}\n"
)

file(WRITE ${CMAKE_BINARY_DIR}/feature_tests/test_inline_asm_direct_symbol_refs_2.c "int main()\n"
    "{\n"
    "#if defined(_MSC_VER) && !defined(__clang__)\n"
    "   extern int test;\n"
    "   __asm mov test, eax\n" 
    "#else\n"
    "   __asm__ __volatile__(\"movl ${EXTERN_PREFIX}test(%rip), %eax\");\n"
    "#endif\n"
    "}\n"
)

# no idea how these two tests should look in a msvc compatible format
file(WRITE ${CMAKE_BINARY_DIR}/feature_tests/test_ebx_1.c "int main()\n"
    "{\n"
    "#if defined(_MSC_VER) && !defined(__clang__)\n"
    "   __asm \"::\"b(0);\n"
    "#else\n"
    "   __asm__ __volatile__(\"\"::\"b\"(0));\n"
    "#endif\n"
    "}\n"
)

file(WRITE ${CMAKE_BINARY_DIR}/feature_tests/test_ebx_2.c "int main()\n"
    "{\n"
    "#if defined(_MSC_VER) && !defined(__clang__)\n"
    "   __asm \":::\"%ebx;\n"
    "#else\n"
    "   __asm__ __volatile__(\"\":::\"%ebx\");\n"
    "#endif\n"
    "}\n"
)

# todo: ebp tests, configure checks if binary crashes, how would that be done in cmake?

try_compile(HAVE_MMXEXT ${CMAKE_BINARY_DIR}/feature_tests ${CMAKE_BINARY_DIR}/feature_tests/test_mmxext.c)
try_compile(HAVE_INLINE_ASM_DIRECT_SYMBOL_REFS_1 ${CMAKE_BINARY_DIR}/feature_tests SOURCES ${CMAKE_BINARY_DIR}/feature_tests/test_inline_asm_direct_symbol_refs_1.c ${CMAKE_BINARY_DIR}/feature_tests/test_extern_symbol.c)
try_compile(HAVE_INLINE_ASM_DIRECT_SYMBOL_REFS_2 ${CMAKE_BINARY_DIR}/feature_tests SOURCES ${CMAKE_BINARY_DIR}/feature_tests/test_inline_asm_direct_symbol_refs_2.c ${CMAKE_BINARY_DIR}/feature_tests/test_extern_symbol.c)
try_compile(HAVE_EBX_AVAILABLE_1 ${CMAKE_BINARY_DIR}/feature_tests SOURCES ${CMAKE_BINARY_DIR}/feature_tests/test_ebx_1.c)
try_compile(HAVE_EBX_AVAILABLE_2 ${CMAKE_BINARY_DIR}/feature_tests SOURCES ${CMAKE_BINARY_DIR}/feature_tests/test_ebx_2.c)
if (HAVE_INLINE_ASM_DIRECT_SYMBOL_REFS_1 OR HAVE_INLINE_ASM_DIRECT_SYMBOL_REFS_2)
    set(HAVE_INLINE_ASM_DIRECT_SYMBOL_REFS 1)
endif ()
if (HAVE_EBX_AVAILABLE_1 OR HAVE_EBX_AVAILABLE_2)
    set(HAVE_EBX_AVAILABLE 1)
endif ()

# builtin function detection
file(WRITE ${CMAKE_BINARY_DIR}/feature_tests/test_gmtime_r.c "#include <time.h>\n"
    "int main()\n"
    "{\n"
    "   time_t *time;\n"
    "   struct tm *tm;\n"
    "   gmtime_r(time, tm);\n"
    "   return 0;\n"
    "}\n"
)

file(WRITE ${CMAKE_BINARY_DIR}/feature_tests/test_localtime_r.c "#include <time.h>\n"
    "int main()\n"
    "{\n"
    "   time_t *time;\n"
    "   struct tm *tm;\n"
    "   localtime_r(time, tm);\n"
    "   return 0;\n"
    "}\n"
)

check_builtin_function(${CMAKE_BINARY_DIR}/feature_tests/test_localtime_r.c LOCALTIME_R)
check_builtin_function(${CMAKE_BINARY_DIR}/feature_tests/test_gmtime_r.c GMTIME_R)

if (${CMAKE_SYSTEM_PROCESSOR} STREQUAL "x86_64" OR ${CMAKE_SYSTEM_PROCESSOR} STREQUAL "AMD64")
    add_compile_definitions(PIC)
    list(APPEND TARGET_ARCHITECTURE_NAMES "X86")
    if (CMAKE_SIZEOF_VOID_P EQUAL 8)
        list(APPEND TARGET_ARCHITECTURE_NAMES "X86_64")
        set(HAVE_FAST_64BIT 1)
    elseif (CMAKE_SIZEOF_VOID_P EQUAL 4)
        list(APPEND TARGET_ARCHITECTURE_NAMES "X86_32")
    endif ()
    set(RESTRICT "restrict")
    set(HAVE_ALIGNED_STACK 1)
    set(HAVE_FAST_CLZ 1)
    set(FAST_UNALIGNED 1)
    if (CMAKE_CXX_COMPILER_ID STREQUAL "Clang" OR CMAKE_CXX_COMPILER_ID STREQUAL "AppleClang")
        set(HAVE_INLINE_ASM 1)
        set(HAVE_MMX_INLINE 1)
        set(HAVE_AMD3DNOW_INLINE 1)
        if (NOT DISABLE_ASM)
            set(HAVE_X86ASM 1)
        endif ()
        if (HAVE_MMXEXT)
            set(HAVE_MMXEXT_INLINE 1)
        else ()
            set(HAVE_MMXEXT_INLINE 0)
        endif ()
    endif ()
else ()
    message(FATAL_ERROR "unsupported target architecture ${CMAKE_SYSTEM_PROCESSOR}")
endif ()

if (WIN32)
    add_compile_definitions(SLIBSUF=".dll")
    set(NASM_PATH "C:\\Program Files\\NASM")
    set(HAVE_PTHREAD_CANCEL 0)
    if(MSVC)
        add_compile_definitions(_USE_MATH_DEFINES _CRT_SECURE_NO_WARNINGS _CRT_NONSTDC_NO_WARNINGS)
        add_definitions(/MP)
        set(HAVE_LIBC_MSVCRT 1)
    endif()
    set(HAVE_WINSOCK2_H 1)
    set(HAVE_W32THREADS 1)
    set(HAVE_DXVA_H 1)
    set(CONFIG_ZLIB 0)
    set(HAVE_CLOSESOCKET 1)
    # nasm stuff for visual studio
    # 
    # notes:
    # 1) the object file name is hardcoded to contain the x86 directory in the path, otherwise objects can collide and overwrite each other,
    #    a more elegant solution would be nice
    # 2) all the flags like includes and forcing including config.asm are also hardcoded
    if(${CMAKE_GENERATOR} MATCHES "Visual Studio.*")
        file(WRITE ${CMAKE_BINARY_DIR}/nasm.props 
            "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
            "<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n"
            "   <ItemDefinitionGroup>\n"
            "       <NASM>\n"
            "           <ObjectFileName>$(IntDir)x86\\%(FileName).obj</ObjectFileName>\n"
            "           <CommandLineTemplate Condition=\"'$(Platform)' == 'Win32'\">\"${NASM_PATH}\\nasm.exe\" -pconfig.asm -I${CMAKE_SOURCE_DIR} -I${CMAKE_SOURCE_DIR}\\libavcodec\\x86 -I${CMAKE_SOURCE_DIR}\\libavutil\\x86 -I${CMAKE_SOURCE_DIR}\\libavresample\\x86 -X vc -f win32 [AllOptions] [Inputs]</CommandLineTemplate>\n"
            "           <CommandLineTemplate Condition=\"'$(Platform)' == 'X64'\">\"${NASM_PATH}\\nasm.exe\" -pconfig.asm -I${CMAKE_SOURCE_DIR} -I${CMAKE_SOURCE_DIR}\\libavcodec\\x86 -I${CMAKE_SOURCE_DIR}\\libavutil\\x86 -I${CMAKE_SOURCE_DIR}\\libavresample\\x86 -X vc -f win64 [AllOptions] [Inputs]</CommandLineTemplate>\n"
            "           <ExecutionDescription>Assembling %(Identity)...</ExecutionDescription>\n"
            "       </NASM>\n"
            "   </ItemDefinitionGroup>\n"
            "</Project>\n"
        )
        file(WRITE ${CMAKE_BINARY_DIR}/nasm.xml 
            "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
            "<ProjectSchemaDefinitions xmlns=\"http://schemas.microsoft.com/build/2009/properties\" xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\" xmlns:sys=\"clr-namespace:System;assembly=mscorlib\">\n"
            "   <Rule\n"
            "       Name=\"NASM\"\n"
            "       PageTemplate=\"tool\"\n"
            "       DisplayName=\"Netwide Assembler\"\n"
            "       Order=\"200\">\n"
            "       <Rule.DataSource>\n"
            "           <DataSource\n"
            "               Persistence=\"ProjectFile\"\n"
            "               ItemType=\"NASM\" />\n"
            "       </Rule.DataSource>\n"
            "       <Rule.Categories>\n"
            "           <Category\n"
            "               Name=\"Command Line\"\n"
            "               Subtype=\"CommandLine\">\n"
            "                   <Category.DisplayName>\n"
            "                       <sys:String>Command Line</sys:String>\n"
            "                   </Category.DisplayName>\n"
            "           </Category>\n"
            "           <Category\n"
            "               Name=\"Object File\"\n"
            "               Subtype=\"ObjectFile\">\n"
            "                   <Category.DisplayName>\n"
            "                       <sys:String>Object File</sys:String>\n"
            "                   </Category.DisplayName>\n"
            "           </Category>\n"
            "       </Rule.Categories>\n"
            "       <StringProperty\n"
            "           Name=\"Inputs\"\n"
            "           Category=\"Command Line\"\n"
            "           IsRequired=\"true\">\n"
            "           <StringProperty.DataSource>\n"
            "               <DataSource\n"
            "                   Persistence=\"ProjectFile\"\n"
            "                   ItemType=\"NASM\"\n"
            "               SourceType=\"Item\" />\n"
            "           </StringProperty.DataSource>\n"
            "       </StringProperty>\n"
            "       <StringProperty\n"
            "           Name=\"CommandLineTemplate\"\n"
            "           DisplayName=\"Command Line\"\n"
            "           Visible=\"False\"\n"
            "           IncludeInCommandLine=\"False\" />\n"
            "       <StringProperty\n"
            "           Name=\"ObjectFileName\"\n"
            "           Category=\"Object File\"\n"
            "           DisplayName=\"Object File Name\"\n"
            "           Description=\"Specifies the name of the output object file.     (-o [file])\"\n"
            "           Switch=\"-o &quot;[value]&quot;\" />\n"
            "   </Rule>\n"
            "   <ItemType\n"
            "       Name=\"NASM\"\n"
            "       DisplayName=\"Netwide Assembler\" />\n"
            "   <FileExtension\n"
            "       Name=\"*.asm\"\n"
            "       ContentType=\"NASM\" />\n"
            "   <ContentType\n"
            "       Name=\"NASM\"\n"
            "       DisplayName=\"Netwide Assembler\"\n"
            "       ItemType=\"NASM\" />\n"
            "</ProjectSchemaDefinitions>\n"
        )
        file (WRITE ${CMAKE_BINARY_DIR}/nasm.targets 
            "<?xml version=\"1.0\" encoding=\"utf-8\"?>\n"
            "<Project xmlns=\"http://schemas.microsoft.com/developer/msbuild/2003\">\n"
            "   <ItemGroup>\n"
            "       <PropertyPageSchema\n"
            "           Include=\"$(MSBuildThisFileDirectory)$(MSBuildThisFileName).xml\" />\n"
            "       <AvailableItemName Include=\"NASM\">\n"
            "           <Targets>_NASM</Targets>\n"
            "      </AvailableItemName>\n"
            "   </ItemGroup>\n"
            "   <PropertyGroup>\n"
            "       <ComputeLinkInputsTargets>\n"
            "           $(ComputeLinkInputsTargets);\n"
            "           ComputeNASMOutput;\n"
            "       </ComputeLinkInputsTargets>\n"
            "       <ComputeLibInputsTargets>\n"
            "           $(ComputeLibInputsTargets);\n"
            "           ComputeNASMOutput;\n"
            "       </ComputeLibInputsTargets>\n"
            "   </PropertyGroup>\n"
            "   <UsingTask\n"
            "       TaskName=\"NASM\"\n"
            "       TaskFactory=\"XamlTaskFactory\"\n"
            "       AssemblyName=\"Microsoft.Build.Tasks.v4.0, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a\">\n"
            "       <Task>$(MSBuildThisFileDirectory)$(MSBuildThisFileName).xml</Task>\n"
            "   </UsingTask>\n"
            "   <Target\n"
            "       Name=\"_NASM\"\n"
            "       BeforeTargets=\"Midl\"\n"
            "       Condition=\"'@(NASM)' != ''\"\n"
            "       Outputs=\"%(NASM.ObjectFileName)\"\n"
            "       Inputs=\"%(NASM.Identity);$(MSBuildProjectFile)\"\n"
            "       DependsOnTargets=\"_SelectedFiles\">\n"
            "       <ItemGroup Condition=\"'@(SelectedFiles)' != ''\">\n"
            "           <NASM Remove=\"@(NASM)\" Condition=\"'%(Identity)' != '@(SelectedFiles)'\" />\n"
            "       </ItemGroup>\n"
            "       <Message\n"
            "           Importance=\"High\"\n"
            "           Text=\"%(NASM.ExecutionDescription)\" />\n"
            "       <NASM\n"
            "           Condition=\"'@(NASM)' != '' and '%(NASM.ExcludedFromBuild)' != 'true'\"\n"
            "           CommandLineTemplate=\"%(NASM.CommandLineTemplate)\"\n"
            "           ObjectFileName=\"%(NASM.ObjectFileName)\"\n"
            "           Inputs=\"%(NASM.Identity)\" />\n"
            "   </Target>\n"
            "   <Target\n"
            "       Name=\"ComputeNASMOutput\"\n"
            "       Condition=\"'@(NASM)' != ''\">\n"
            "       <ItemGroup>\n"
            "           <Link Include=\"@(NASM->Metadata('ObjectFileName')->Distinct()->ClearMetadata())\" Condition=\"'%(NASM.ExcludedFromBuild)' != 'true'\"/>\n"
            "           <Lib Include=\"@(NASM->Metadata('ObjectFileName')->Distinct()->ClearMetadata())\" Condition=\"'%(NASM.ExcludedFromBuild)' != 'true'\"/>\n"
            "       </ItemGroup>\n"
            "   </Target>\n"
            "</Project>\n"
        )
        file (WRITE ${CMAKE_BINARY_DIR}/Directory.Build.targets
            "<Project>\n"
            "   <Import Project=\"nasm.targets\" />\n"
            "   <Import Project=\"nasm.props\" />\n"
            "</Project>\n"
        )
    endif ()
else ()
    add_compile_definitions(SLIBSUF=".so")
endif (WIN32)

set(SWS_MAX_FILTER_SIZE 256)

file(WRITE config.h "/* Automatically generated by cmake - do not modify! */\n"
    "#ifndef FFMPEG_CONFIG_H\n"
    "#define FFMPEG_CONFIG_H\n"
    "#define FFMPEG_CONFIGURATION \"${FFMPEG_CONFIGURATION}\"\n"
    "#define FFMPEG_LICENSE \"\"\n"
    "#define CONFIG_THIS_YEAR \"${CONFIG_THIS_YEAR}\"\n"
    "#define FFMPEG_DATADIR \"${FFMPEG_DATADIR}\"\n"
    "#define AVCONV_DATADIR \"${AVCONV_DATADIR}\"\n"
    "#define CC_IDENT \"${CMAKE_C_COMPILER}\"\n"
    "#define av_restrict ${RESTRICT}\n"
    "#define HAVE_MMX2 HAVE_MMXEXT\n"
    "#define EXTERN_PREFIX \"${EXTERN_PREFIX}\"\n"
    "#define SWS_MAX_FILTER_SIZE ${SWS_MAX_FILTER_SIZE}\n"
)

file(WRITE config.asm "; Automatically generated by cmake - do not modify!\n")

# write ARCH_ entries
foreach (ARCHITECTURE_NAME ${ARCHITECTURE_NAMES})
    if (${ARCHITECTURE_NAME} IN_LIST TARGET_ARCHITECTURE_NAMES)
        file(APPEND config.h "#define ARCH_${ARCHITECTURE_NAME} 1\n")
        file(APPEND config.asm "%define ARCH_${ARCHITECTURE_NAME} 1\n")
    else ()
        file(APPEND config.h "#define ARCH_${ARCHITECTURE_NAME} 0\n")
        file(APPEND config.asm "%define ARCH_${ARCHITECTURE_NAME} 0\n")
    endif ()
endforeach (ARCHITECTURE_NAME)

if (HAVE_MMXEXT)
    file(APPEND config.h "#define HAVE_MMXEXT 1\n")
    file(APPEND config.asm "%define HAVE_MMXEXT 1\n")
else ()
    file(APPEND config.h "#define HAVE_MMXEXT 0\n")
    file(APPEND config.asm "%define HAVE_MMXEXT 0\n")
endif (HAVE_MMXEXT)

# write HAVE_ entries
foreach (HAVE_NAME ${HAVE_NAMES})
    file(APPEND config.h "#define HAVE_${HAVE_NAME} ${HAVE_${HAVE_NAME}}\n")
    file(APPEND config.asm "%define HAVE_${HAVE_NAME} ${HAVE_${HAVE_NAME}}\n")
endforeach ()

file(APPEND config.h "#define HAVE_BIGENDIAN ${BIG_ENDIAN}\n")
file(APPEND config.asm "%define HAVE_BIGENDIAN ${BIG_ENDIAN}\n")
file(APPEND config.h "#define HAVE_FAST_UNALIGNED ${FAST_UNALIGNED}\n")
file(APPEND config.asm "%define HAVE_FAST_UNALIGNED ${FAST_UNALIGNED}\n")

# write CONFIG_ entries
foreach (CONFIG_NAME ${CONFIG_NAMES})
    file(APPEND config.h "#define CONFIG_${CONFIG_NAME} ${CONFIG_${CONFIG_NAME}}\n")
    file(APPEND config.asm "%define CONFIG_${CONFIG_NAME} ${CONFIG_${CONFIG_NAME}}\n")
endforeach ()

foreach (EXTRA_CONFIG_NAME ${EXTRA_CONFIG_NAMES})
    file(APPEND config.h "#define CONFIG_${EXTRA_CONFIG_NAME} ${CONFIG_${EXTRA_CONFIG_NAME}}\n")
    file(APPEND config.asm "%define CONFIG_${EXTRA_CONFIG_NAME} ${CONFIG_${EXTRA_CONFIG_NAME}}\n")
endforeach ()

# write muxers
configure_things("${MUXER_NAMES}")

# write demuxers
configure_things("${DEMUXER_NAMES}")

# write encoders
configure_things("${ENCODER_NAMES}")

# write decoders
configure_things("${DECODER_NAMES}")

# write parsers
configure_things("${PARSER_NAMES}")

# write filters
configure_things("${FILTER_NAMES}")

# common feature detection for input / output devices 
check_header(SYS_SOUNDCARD_H "sys/soundcard.h")

if (NOT HAVE_SYS_SOUNDCARD_H)
    set(CONFIG_OSS_INDEV 0)
    set(CONFIG_OSS_OUTDEV 0)
endif ()

check_header(SNDIO_H "sndio.h")

if (NOT HAVE_SNDIO_H)
    set(CONFIG_SNDIO_INDEV 0)
    set(CONFIG_SNDIO_OUTDEV 0)
endif ()

# write input devices
if (NOT ANDROID)
    set(CONFIG_ANDROID_CAMERA_INDEV 0)
endif ()
if (NOT WIN32)
    set(CONFIG_DSHOW_INDEV 0)
    set(CONFIG_GDIGRAB_INDEV 0)
    set(CONFIG_VFWCAP_INDEV 0)
endif ()
if (NOT APPLE)
    set(CONFIG_AVFOUNDATION_INDEV 0)
endif ()
if (NOT LINUX)
    set(CONFIG_BKTR_INDEV 0)
    set(CONFIG_ALSA_INDEV 0)
    set(CONFIG_FBDEV_INDEV 0)
endif ()
if (NOT ENABLE_X11)
    set(CONFIG_XCBGRAB_INDEV 0)
endif ()
if (NOT ENABLE_DECKLINK)
    set(CONFIG_DECKLINK_INDEV 0)
endif ()
if (NOT ENABLE_LIBNDI_NEWTEK)
    set(CONFIG_LIBNDI_NEWTEK_INDEV 0)
endif ()
if (NOT ENABLE_JACK)
    set(CONFIG_JACK_INDEV 0)
endif ()
if (NOT ENABLE_LIBPULSE)
    set(CONFIG_PULSE_INDEV 0)
endif ()
if (NOT ENABLE_LIBCD1394)
    set(CONFIG_LIBDC1394_INDEV 0)
endif ()
if (NOT LINUX)
    set(CONFIG_V4L2_INDEV 0)
endif ()
if (NOT ENABLE_LIBCDIO)
    set(CONFIG_LIBCDIO_INDEV 0)
endif ()
if (NOT ENABLE_OPENAL)
    set(CONFIG_OPENAL_INDEV 0)
endif ()
if (NOT ENABLE_KMS)
    set(CONFIG_KMSGRAB_INDEV 0)
endif ()
if (NOT ENABLE_IEC61883)
    set(CONFIG_IEC61883_INDEV 0)
endif ()

file(WRITE libavdevice/indev_list.c "static const AVInputFormat * const indev_list[] = {\n")
foreach (INPUT_DEVICE_NAME ${INPUT_DEVICE_NAMES})
    string(TOUPPER ${INPUT_DEVICE_NAME} INPUT_DEVICE_NAME_UPPER)
    if (${CONFIG_${INPUT_DEVICE_NAME_UPPER}})
        string(REPLACE "indev" "demuxer" INPUT_DEVICE ${INPUT_DEVICE_NAME})
        file(APPEND libavdevice/indev_list.c "  &ff_${INPUT_DEVICE},\n")
    endif ()
endforeach ()
file(APPEND libavdevice/indev_list.c "NULL };\n")

configure_things("${INPUT_DEVICE_NAMES}")

# write output devices
if (NOT LINUX)
    set(CONFIG_ALSA_OUTDEV 0)
    set(CONFIG_FBDEV_OUTDEV 0)
endif ()
if (NOT ENABLE_LIBCACA)
    set(CONFIG_CACA_OUTDEV 0)
endif ()
if (NOT ENABLE_DECKLINK)
    set(CONFIG_DECKLINK_OUTDEV 0)
endif ()
if (NOT ENABLE_LIBNDI_NEWTEK)
    set(CONFIG_LIBNDI_NEWTEK_OUTDEV 0)
endif ()
if (NOT ENABLE_JACK)
    set(CONFIG_JACK_OUTDEV 0)
endif ()
if (NOT ENABLE_LIBPULSE)
    set(CONFIG_PULSE_OUTDEV 0)
endif ()
if (NOT LINUX)
    set(CONFIG_V4L2_OUTDEV 0)
endif ()
if (NOT ENABLE_X11)
    set(CONFIG_XV_OUTDEV 0)
endif ()
if (NOT ENABLE_LIBSDL)
    set(CONFIG_SDL2_OUTDEV 0)
endif ()

file(WRITE libavdevice/outdev_list.c "static const AVOutputFormat * const outdev_list[] = {\n")
foreach (OUTPUT_DEVICE_NAME ${OUTPUT_DEVICE_NAMES})
    string(TOUPPER ${OUTPUT_DEVICE_NAME} OUTPUT_DEVICE_NAME_UPPER)
    if (${CONFIG_${OUTPUT_DEVICE_NAME_UPPER}})
        string(REPLACE "outdev" "muxer" OUTPUT_DEVICE ${OUTPUT_DEVICE_NAME})
        file(APPEND libavdevice/outdev_list.c "  &ff_${OUTPUT_DEVICE},\n")
    endif ()
endforeach ()
file(APPEND libavdevice/outdev_list.c "NULL };\n")

configure_things("${OUTPUT_DEVICE_NAMES}")

# write protocols for libavformat
find_things_extern(protocol URLProtocol libavformat/protocols.c AVFORMAT_PROTOCOLS)
set(CONFIG_LIBSMBCLIENT_PROTOCOL 0)
set(CONFIG_BLURAY_PROTOCOL 0)
set(CONFIG_LIBSSH_PROTOCOL 0)
set(CONFIG_LIBAMQP_PROTOCOL 0)
set(CONFIG_LIBSRT_PROTOCOL 0)
set(CONFIG_LIBZMQ_PROTOCOL 0)

check_header(SCTP_H "netinet/sctp.h")

if (NOT HAVE_SCTP_H)
    set(CONFIG_SCTP_PROTOCOL 0)
endif ()

if (NOT CONFIG_OPENSSL)
    set(CONFIG_FFRTMPCRYPT_PROTOCOL 0)
    set(CONFIG_TLS_PROTOCOL 0)
endif ()

if (WIN32)
    set(CONFIG_UNIX_PROTOCOL 0)
endif ()

if (${CONFIG_LIBRTMP} EQUAL 0)
    set(CONFIG_SCTP_PROTOCOL 0)
    set(CONFIG_LIBRTMP_PROTOCOL 0)
    set(CONFIG_LIBRTMPE_PROTOCOL 0)
    set(CONFIG_LIBRTMPS_PROTOCOL 0)
    set(CONFIG_LIBRTMPT_PROTOCOL 0)
    set(CONFIG_LIBRTMPTE_PROTOCOL 0)
endif ()

print_enabled_components(libavformat/protocol_list.c URLProtocol url_protocols "${AVFORMAT_PROTOCOLS}")
configure_things("${AVFORMAT_PROTOCOLS}")

file(APPEND config.h "#endif /* FFMPEG_CONFIG_H */\n")

add_subdirectory(libavutil)
add_subdirectory(libavcodec)
add_subdirectory(libavformat)
add_subdirectory(libpostproc)
add_subdirectory(libavresample)
add_subdirectory(libavfilter)
add_subdirectory(libavdevice)
add_subdirectory(libswscale)
add_subdirectory(libswresample)

set(GENERATED_CONFIG_HEADERS config.h
    libavutil/avconfig.h
)

set(GENERATED_VERSION_HEADERS libavutil/ffversion.h)

if (NOT DISABLE_FFMPEG)
    set(FFMPEG_SOURCES fftools/ffmpeg.c
        fftools/ffmpeg_opt.c 
        fftools/ffmpeg_filter.c
        fftools/ffmpeg_hw.c
        fftools/cmdutils.c
    )

    set(FFMPEG_HEADERS fftools/ffmpeg.h
        fftools/cmdutils.h
    )

    add_executable(ffmpeg ${FFMPEG_SOURCES} ${FFMPEG_HEADERS} ${GENERATED_CONFIG_HEADERS} ${GENERATED_VERSION_HEADERS})
    target_include_directories(ffmpeg PRIVATE ${CMAKE_SOURCE_DIR})
    target_link_libraries(ffmpeg avformat avcodec postproc avresample avfilter avdevice swscale swresample avutil)
endif ()

if (NOT DISABLE_FFPLAY)
    find_package(SDL2 CONFIG REQUIRED)

    set(FFPLAY_SOURCES fftools/ffplay.c
        fftools/cmdutils.c
    )

    set(FFPLAY_HEADERS fftools/cmdutils.h)

    add_executable(ffplay ${FFPLAY_SOURCES} ${FFPLAY_HEADERS} ${GENERATED_CONFIG_HEADERS} ${GENERATED_VERSION_HEADERS})
    target_include_directories(ffplay PRIVATE ${CMAKE_SOURCE_DIR})
    target_link_libraries(ffplay avformat avcodec postproc avresample avfilter avdevice swscale swresample avutil SDL2::SDL2main SDL2::SDL2-static)
endif ()